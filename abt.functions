# 
# important notice to script hackers
# pay attention to 'magic' word in the script comments
# 

#global variables 
typeset -A svnDirs
svnDirs[trunk]='trunk'
svnDirs[branch]='branches'
svnDirs[tag]='tags'
svnDirs[local]='local'
svnDirs[custom]='-'
rpmBuildMethod=${rpmBuildMethod-'rpmbuild'}
mockConfigDir=${mockConfigDir-'/etc/abt/mock'}
mockConfigFile=''
optMockConfigFile=''

if [[ ! -d $workDir || $workDir == '' ]] then
	print -- "ERR - workdir $workDir does not set or not exists" >&2
	exit 1
  else
    workDir="$workDir:h/$workDir:t/"
    curPWD=`pwd`
    pushd $workDir
fi

targetDir=''
mockDir=''
mockRoot=''
abtFile='abt'

typeset -A vcsModules
typeset -A vcsSubModules
typeset -A rpmRequires
typeset -a packageList
packageList[1]='reserved for src rpm'
typeset -a changeLog
changeLog[1]='reserved for entry stamp'
typeset -A vcsModuleAlias

#added to perform multibuild of the same rpm spec with different features
typeset -a rpmMacros

#2 variables below are defined in rpmInitEnv
rpmSpecDir=''
rpmSrcDir=''

modVer=''
modBuild=''
rpmRel=''
specFile=''
isDebug=1
isLog=0

mockDebugOpt=''
#default log file
_logFileMask=abt-`date +%d%b-%H%M%S.XXXXXX`.log
logFile=`mktemp -p ${workDir} $_logFileMask`
[ -f $logFile ] && rm -rf $logFile

canContinue='no'

TRAPINT() {
  print "INTERRUPTED."
  rm -f /tmp/abt.$$.lock
  return $(( 128 + $1 ))
}

TRAPEXIT() {
#  print "FINISHED."
  rm -f /tmp/abt.$$.lock
}

TRAPZERR() {
	if [[ $canContinue == 'yes' ]] then return 0; fi
		
	print "ERROR TRAPPED. see $logFile for detailed description" >&2
  if [[ -n "$mockDir" && -f $mockDir/results/build.log ]] then print "additional information can be available in $mockDir/results/build.log" >&2; fi

  rm -f /tmp/abt.$$.lock
  sleep 1
	kill $$
}

function printERR {
	local _msg
	_msg=$1

	print "ERR - $_msg" >&2
	if [[ -n "$isLog" && -n "$logFile" && -w "$logFile" ]] then print "ERR - $_msg" >> $logFile; fi
	exit 1
}

function printDBG {
	local _msg _lvl
	_msg=$1
	_lvl=$2

# have to not use && here to not confuse pipes
	if [[ -n "$isLog" && -n "$logFile" ]] then print -- "${_msg#CMDOUT }" >> $logFile; fi
	if [[ -z "$_lvl" ]] then _lvl=1; fi
  
  _msgPrefix='INFO'
  [[ $_lvl -gt 1 ]] && _msgPrefix='DBG'
	if [[ -n "$isDebug" ]] then 
		if [[ $isDebug -ge $_lvl ]] then print -- "$_msgPrefix - $_msg" >&2; fi
	fi
}

function svnInitEnv {
  printDBG "invoking ${0}[$stgNum]"

  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    return 0
  fi

  local _i
# checking if an abt script is exists and  source it
  if [[ -z "$vcsRel" ]] then
    vcsRel='tag'
  else
    for _i in ${(k)svnDirs}
    do
      [[ "$_i" == $vcsRel ]] && _valid=1
    done
    [[ -z "$_valid" ]] && printERR "$vcsRel is not valid for branch definition"
  fi

  case $pkgType in
    'deb')
      specDir='debian' ;;
    'rpm')
      specDir='RPM/SPECS' ;;
    *)
      printERR "[$pkgType] package type is not supported" ;;
  esac

  _r=`svnList "" "$specDir/$abtFile"`
  if [[ -n $_r ]] then
    _tmp_abt_file=`execCmd "mktemp -p ${workDir} abt.XXXXXXXXXX" '' '1'`
    svnCat "" "$specDir/$abtFile" "" "1" > $_tmp_abt_file
    source "$_tmp_abt_file" || printERR "error while sourcing $_tmp_abt_file"
    execCmd "rm $_tmp_abt_file"
    if [[ $pkgType == 'rpm' && ( -z "$specFile" || -z "$pkgName" ) ]] then
      printERR "specFile $specFile or pkgName $pkgName is not defined"
    fi
  fi
}

function debInitEnv {
  printDBG "invoking ${0}[$stgNum]"

  if [[ -z "$pkgName" ]]; then
    pkgName=`svnCat "" "$specDir/control" "" "1" | awk -F': ?' '/^Package/ {print $2}'`
    vcsModules[$vcsModule]=$modBuild
  fi
  targetDir="$workDir$pkgName-${modBuild:-targetDir}"
  [[ -d $targetDir ]] && rm -rf $targetDir
}

function debBuild {
  printDBG "invoking ${0}[$stgNum]"

  pushd $targetDir/$vcsModule
  execCmd "dpkg-buildpackage"
}

function debInstallDeps {
  printDBG "invoking ${0}[$stgNum]"

  pushd $targetDir/$vcsModule
  execCmd "sudo mk-build-deps -i -t 'apt-get --no-install-recommends -y'"
  popd
}

function setMockConfigFile {
  printDBG "invoking ${0}" 2
  local _arch
  _arch=$1

  if [[ -f "$mockConfigDir/${optMockConfigFile}" ]] then
      printDBG "using specified $optMockConfigFile explicitly" 2
      mockConfigFile="${optMockConfigFile%.cfg}"
      return 0
  fi
  if [[ -n "$optMockConfigFile" ]] then
    mockConfigFile="${optMockConfigFile}-$_arch"
    printDBG "set mock config file to $mockConfigFile" 2
  else
    if [[ -f "$mockConfigDir/${${modBuild%.*}%.*}-$_arch.cfg" ]] then
      mockConfigFile="${${modBuild%.*}%.*}-$_arch"
      printDBG "set mock config file to $mockConfigFile" 2
    else
      mockConfigFile="default-$_arch" 
      printDBG "$mockConfigDir/${${modBuild%.*}%.*}-$_arch.cfg not found, trying to use $mockConfigFile" 2
    fi
  fi
  [[ -f "$mockConfigDir/$mockConfigFile.cfg" ]] || printERR "$mockConfigDir/$mockConfigFile.cfg not found"
}

function rpmInitEnv {
  printDBG "invoking ${0}[$stgNum]"
  local _m
  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    [[ $specFile == ${specFile#/} ]] && [[ $specFile == ${specFile#\~} ]] &&  specFile="${curPWD}/${specFile}"
    _m=", using specfile $specFile"
    [[ -f $specFile ]] || printERR "$specFile not found"
    pkgName=`execCmd "rpm -q --qf '%{NAME}\n' --specfile $specFile | head -1" '' '1'`
    modBuild=`execCmd "rpm -q --qf '%{VERSION}\n' --specfile $specFile | head -1" '' '1'`
  fi
  printDBG "invoking ${0}[$stgNum], initializing ${rpmBuildMethod:-rpmbuild}$_m"

#  checkEnvironment
  [[ `rpm -E %packager` == '%packager' ]] && printERR "please define %packager at $HOME/.rpmmacros"
  execCmd "mkdir -vp  `rpm -E '%_tmppath %_rpmdir %_builddir %_sourcedir %_specdir %_srcrpmdir'`"
  if [[ "$rpmBuildMethod" == 'mock' ]] then
    _mockBin=`execCmd "which mock" 'yes' '1'`;
    [[ -x "$_mockBin"  ]] || printERR "mock not found"
    [[ `id | grep  -o '\((mock)\)'` != '(mock)' ]] && printERR "in the order to use mock, you have to be a member of mock group"
    _mockVersion=`execCmd "$_mockBin --version" '' '1'`
#    [[ -n "${_mockVersion##1.0*}" ]] && printERR "only mock 1.0.x is supported, you have $_mockVersion"
    [[ `df|awk '/^tmpfs.+\/dev\/shm/{printf "%.0f\n", $4/1024/1024}'` -lt 1 ]] && printERR "/dev/shm have less than 1Gb, please clean and run again"
  fi

	rpmSpecDir=`rpm -E %_specdir`
	rpmSrcDir=`rpm -E %_sourcedir`
  case $isDebug in
    '1')
        mockDebugOpt='-q' ;;
    '2')
        mockDebugOpt='' ;;
    '3')
        mockDebugOpt='-v' ;;
    *) 
        mockDebugOpt='-v' ;;
  esac
	
  if [[ "$rpmBuildMethod" == 'mock' ]] then
      setMockConfigFile `arch`
      mockRoot=`execCmd "mock $mockDebugOpt --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros --print-root" '' '1'`
      mockDir="${workDir}mock/${${mockRoot##*mock/}%*/root/}"
      set -o nullglob
      if [[ -n `print /tmp/abt.*.lock | grep -v '^$'` ]] then
        _locked=`execCmd "grep -H '$mockRoot' /tmp/abt.*.lock" 'yes' '1'`
        [[ -n "$_locked" ]] && printERR "looks like there is already an abt process which use $mockRoot. if not, please remove $_locked"
      fi
      print $mockRoot > /tmp/abt.$$.lock
      set +o nullglob
      [[ -d $mockDir ]] &&  execCmd "rm -rf $mockDir"
      execCmd "mkdir -p $mockDir/results"
      execCmd "mock $mockDebugOpt --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros --scrub=chroot"
      execCmd "mock $mockDebugOpt --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros --init 2>&1"
  fi
  
  targetDir="$workDir$pkgName-${modBuild:-targetDir}"
  [[ -d $targetDir ]] && rm -rf $targetDir
	# magic '/' in specFile definition
	# if specFile contain a '/' it's assumed to found in relative path of targetDir root
	if [[ ${specFile##*/} != $specFile ]] then
		specFile="$targetDir/$specFile"
	else
		specFile="$targetDir/`basename $vcsModule`/$specDir/$specFile"
	fi
}

function execCmd {
  local _cmd _nonFail _reqOut _host _ifs
  _cmd=$1       # command
  _nonFail=$2   # if 'yes', the failed status of executed program considered as expected behavour
  _reqOut=$3    # if non zero, program have to return its out
  _host=$4      # if non zero, program executed on remote host
	
  [[ -n "$_host" && "$_host" != 'local' ]] && _cmd="ssh $_host $_cmd"
  printDBG "invoking execCmd $_cmd _nonFail=$_nonFail _reqOut=$_reqOut _host=$_host" 2

  canContinue=$_nonFail

  eval "$_cmd" | { 
    _ifs=$IFS
    IFS=`print "\n"`
    while read -r _l ; do 
      printDBG "CMDOUT $_l" 3
      if [[ -n "$_reqOut" ]] then print -r "$_l"; fi
    done 
    IFS=$_ifs
  }
  canContinue=no
}

function copyCmd {
	local _src _dst _host
	_src=$1
	_dst=$2
	_host=$3

	if [[ -z "$_host" || "$_host" == 'local' ]] then
		execCmd "cp $_src $_dst" 
	else
		execCmd "scp $_src $_host:$_dst" 
	fi
}

function moduleSetAlias {
	printDBG "invoking $0 $1 $2" 2

	vcsModuleAlias[$1]="$2"
}

function rpmSetOptMacros {
	printDBG "invoking $0 $1 $2" 2

	rpmOptMacros="$rpmOptMacros --define='$1 $2' "
}

function moduleGetAlias {
	printDBG "invoking $0 $1" 2

	if [[ -n "${vcsModuleAlias[$1]}" ]] then
		print ${vcsModuleAlias[$1]}
	else
		if [[ -n "$2" ]] then
			print $1;
		else
			printERR "Alias not specified for $1"
		fi
	fi
}

function svnGetRev {
	local _ver
	_ver=$1

	[[ -z "$_ver" ]] && _ver="$modBuild"
	case $vcsRel in
		'trunk') 
				print ${svnDirs[$vcsRel]}/ ;;
		'branch')
				print ${svnDirs[$vcsRel]}/${_ver%[.-]+([0-9])}/ ;;
		'tag')
				print ${svnDirs[$vcsRel]}/$_ver/ ;;
		'local')
				print "local" ;;
		'custom')
				print "" ;;
		*)
				printERR "Unknown vcsRel $vcsRel" ;;
	esac
}

function svnList {
	local _module _path _svnRev
	_module=$1
	_path=$2
 
	_svnRev=`svnGetRev`

	if [[ -z "$_module" ]] then _module="$vcsModule"; fi

	[[ -n "$svnProjectRev" ]] && _svnRevOpt="-r $svnProjectRev"

	_module=`moduleGetAlias $_module $_svnRev`
	if [[ "$_svnRev" = "local" ]] then
		execCmd "ls $_module/$_path" 'yes' '1'
	else
		execCmd "svn list $_svnRevOpt $svnBase$_module/$_svnRev$_path" 'yes' '1'
	fi
}

function svnCat {
	local _module _path _nonFail _reqOut _svnRev
	_module=$1
	_path=$2
  _nonFail=$3
	_reqOut=$4

	if [[ -z "$_module" ]] then _module="$vcsModule"; fi

	_svnRev=`svnGetRev ${vcsModules[$_module]}`

	[[ -n "$svnProjectRev" ]] && _svnRevOpt="-r $svnProjectRev"

	_module=`moduleGetAlias $_module $_svnRev`
	if [[ "$_svnRev" = 'local' ]] then
		execCmd "cat $_module/$_path" "$_nonFail" "$_reqOut"
	else
		execCmd "svn cat $_svnRevOpt $svnBase$_module/$_svnRev$_path" "$_nonFail" "$_reqOut"
	fi
}

function svnCheckout {
	local _module _path _dst _nonFail _reqOut _svnRev _svnRevOpt
	_module=$1
	_path=$2
	_dst=$3
  _nonFail=$4
	_reqOut=$5
 
	[[ -z "$_module" ]] && _module="$vcsModule"
	_svnRev=`svnGetRev ${vcsModules[$_module]}`

  [[ -n "$svnProjectRev" ]] &&	_svnRevOpt="-r $svnProjectRev"

	if [[ -z "$_dst" ]] then 
    [[ -z "$distCheckout" ]] &&  _dst="$targetDir/`basename $_module`" || _dst="$targetDir"
  fi 
    
	_module=`moduleGetAlias $_module $_svnRev`
	if [[ "$_svnRev" = "local" ]] then
		execCmd "mkdir -p $_dst" "$_nonFail" "$_reqOut"
		execCmd "cp -r $_module/$_path/* $_dst" "$_nonFail" "$_reqOut"
	else
	execCmd "svn checkout $_svnRevOpt $svnBase$_module/$_svnRev$_path $_dst" "$_nonFail" "$_reqOut"
	fi
}

function logFromJira4 {
  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    return 0
  else
	  printDBG "invoking ${0}[$stgNum]"
  fi

	[[ -z "$jiraKey" ]] && return

  local _version_code _release_code 

  _version_code=`curl -s --insecure "$jira_site/browse/$jiraKey?selectedTab=com.atlassian.jira.plugin.system.project%3Achangelog-panel&allVersions=true&$jira_auth_string" | awk -F'/|"' -v ver=$modBuild '{if($0 ~ ">" ver "<"){print $10}}'`
  [[ -z "$_version_code" ]] && printERR "an error occured while fetching changelog from jira. _vesion_code is empty"

  _release_code=`curl -s --insecure "$jira_site/browse/$jiraKey/fixforversion/$_version_code?$jira_auth_string" | awk '/release-notes/{print}' | grep -o 'projectId=.\+version=[[:digit:]]\+'`
  [[ -z "$_release_code" ]] && printERR "an error occured while fetching changelog from jira. _release_code is empty"

  curl -s --insecure "$jira_site/secure/ReleaseNote.jspa?atl_token=AZlt_YQdO4&styleName=Text&$_release_code&Create=Create&$jira_auth_string" | sed  -n -e '/<textarea/,/<\/textarea/p' | sed -e '/^$/d' -e '$d' -e 's/^ *\* /- /' -e 's/] - /] /' -e '/^\*\*/d' | sed -e '1,2d' | \
  {
    while read _l; do
      changeLog[$(($#changeLog+1))]="$_l"
      printDBG "$_l" 2
    done
  }
}

function logFromJira {
	printDBG "invoking ${0}[$stgNum]"

	[[ -z "$jiraKey" ]] && return

	#getting changelog from jira, formatting and putting in spec
	wget -q -O - --no-check-certificate --post-data $jira_auth_string "$jira_site/browse/${jiraKey}?report=com.atlassian.jira.plugin.system.project:changelog-panel&subset=-1"  | \
	lynx -dump -stdin | \
	awk --assign productVersion="$modBuild" \
	'BEGIN {op=0} {
				if (op==1 && $0 !~ "Released") { 
					out=$0;
					gsub(/[[:space:]]+/," ",out);
					gsub(/\[[0-9]+\]/,"",out);
					nl=$0 ~ /^[[:space:]]+\[[0-9]+\]/; #identifies new changelog line
					if (nl && lnl) printf "\n";
					lnl=nl;
					printf "%s%s%s", nl?"-":"",out, nl?"":"\n";
				}
				if($0 ~ "Released") { 
					if (op==1) op=-1; 
					if ( $0 ~ productVersion && op==0) { op=1; gsub(/\[[0-9]+\]/,""); print $2}
				} 
			}END{ if (op==0) { print "ERR - failed to fetch changelog from jira" > "/dev/stderr"; exit -1 }
	}' | \
	{
		read _productVersion
		printDBG "fetched from jira. changelog for $jiraKey $_productVersion:" 2
		while read _l; do
			changeLog[$(($#changeLog+1))]="$_l" 
			printDBG "$_l" 2
		done 
	}
	if [[ "$modBuild" != "$_productVersion" ]] then
		printERR "an error occured while fetching changelog from jira. the vesion $modBuild is not found in changelog" 
	fi
}

function modifySpec {
  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    return 0
  else
	  printDBG "invoking ${0}[$stgNum]"
  fi
	
	local _err _packager _buildDate _i
	if [[ ! -f $specFile ]] then
		printERR "$specFile does not exists"
	fi
	#replacing version in specfile
	execCmd "sed -i -e 's/\(^Version:\)\(.*\)/\1 $modBuild/'  $specFile"
  #replacing release in specfile
  [[ $rpmRel == '' ]] || execCmd "sed -i -e 's/\(^Release:\)\(.*\)/\1 $rpmRel/'  $specFile"
  
	#verify spec by querying it, if rpmMacros exists then substituting first macro
	_err=`execCmd "rpm -q $rpmOptMacros ${rpmMacros[1]} --qf '%{NAME}' --specfile $specFile 2>&1 >/dev/null" "" 1`
	[[ -n "$_err" ]] && printERR "error in specfile $_err"
	_packager=`execCmd "rpm -E '%packager'" "" '1'`
	_buildDate=`execCmd "date '+%a %b %d %Y'" "" '1'`
	changeLog[1]=`execCmd "rpm -q $rpmOptMacros ${rpmMacros[1]} --qf '* $_buildDate $_packager %|EPOCH?{%{EPOCH}:}|%{VERSION}-%{RELEASE}\n' --specfile $specFile | head -1" '' '1'`
	#check if log entry already exists in spec
	verFromStamp=$( print -- "${changeLog[1]}" | awk '{print $(NF)}' )
	if [[ `execCmd "rpm -q $rpmOptMacros ${rpmMacros[1]} --changelog --specfile $specFile | awk '/^\*.+'"$verFromStamp"'$/ { print 1; exit }'" '' '1'` == '1' ]] then
		printERR "changelog entry with $verFromStamp alredy exists"
	fi
	#piping ed commands
	{
		print -- '/^%changelog/a'
		for _i in "${changeLog[@]}"
		do
			print -- "${_i}"
		done
		print "\n.\nw\nq\n"
	} | ed -s $specFile
}

function svnPrepare {
  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    return 0
  else
	  printDBG "invoking ${0}[$stgNum]"
  fi

	local _vcsModule _svnRev _targetDir _l _oneLine

	for _vcsModule in ${(k)vcsModules}
	do
		_oneLine=''
		_svnRev=`svnGetRev ${vcsModules[$_vcsModule]}`
		if [[ -n "${vcsModules[$_vcsModule]}" ]] then
			if [[ -n "${vcsSubModules[$_vcsModule]}" ]] then
				for _subModule in ${vcsSubModules[$_vcsModule]}
				do
				# 'magic' '/' in subModule definition. should be considered as a 'long patch'
				# if a subModule definition contain '/' at the end, 
				# the target path will be the same as listed in submodule, not only the last dir
					if [[ -z ${_subModule##*/} ]] then
						_targetDir=$targetDir/$_subModule
					else 
						_targetDir=$targetDir/`basename $_subModule`
					fi
					svnCheckout $_vcsModule $_subModule $_targetDir '' 1 
				done
			else
				svnCheckout $_vcsModule "" "" "" 1 
			fi
		fi | { \
			while read _l; do
				if [[ -z "${_l#+(Checked out revision )+([0-9]*).}" && -z "$_oneLine" ]] then
					if [[ ${#changeLog[*]} -gt 2 ]] then
						changeLog[$(($#changeLog+1))]="- $_l from $_vcsModule/$_svnRev"
					else
						changeLog[2]="- $_l from $_vcsModule/$_svnRev"
					fi
					_oneLine='1';
				fi
			done
		}
	done
}

function svnCommit {
	printDBG "invoking ${0}[$stgNum]"

	if [[ "$vcsRel" == "local" ]] then
		printERR "Commit not allowed in 'local' mode"
	fi

	execCmd "svn commit $targetDir/`basename $vcsModule` -m 'abt commit'"
}

function svnCommitSpec {
	printDBG "invoking ${0}[$stgNum]"

	if [[ "$vcsRel" == "local" ]] then
		printERR "Commit not allowed in 'local' mode"
	fi

	local _trunk_ver
  if [[ $vcsRel == 'tag' ]] then
 		if [[ -n "${vcsSubModules[$vcsModule]}" ]] then
			[[ -d "$targetDir/$specDir" ]] || printERR "$targetDir/$specDir does not exists"
			pushd $targetDir/$specDir
		else
			[[ -d "$targetDir/`basename $vcsModule`/$specDir" ]] || printERR "`basename $vcsModule`/$specDir does not exists"
			pushd $targetDir/`basename $vcsModule`/$specDir
		fi
		execCmd "svn commit -m 'abt $modBuild commit'"
		execCmd "svn switch $svnBase$vcsModule/${svnDirs[branch]}/${modVer}/$specDir"
		modifySpec
		execCmd "svn commit -m 'abt $modBuild commit'"
		execCmd "svn switch $svnBase$vcsModule/${svnDirs[trunk]}/$specDir" 
		_trunk_ver=`execCmd "rpm -q --qf '%{VERSION}\n' --specfile $specFile | head -1" "" 1`
		if [[ `python -c "import rpm; print rpm.labelCompare(('','$_trunk_ver',''),('','$modBuild',''))"` -lt 0 ]] then
			modifySpec
			execCmd "svn commit -m 'abt $modBuild commit'"
		fi
		execCmd "svn switch $svnBase$vcsModule/${svnDirs[tag]}/$modBuild/$specDir"
		popd
	fi
}

function rpmDirPrepare {
  printDBG "invoking ${0}[$stgNum]"

  if [[ -z "$vcsModule" ]] then
    printDBG "svn module empty, assuming build from a spec file" 2
    return 0
  fi

  local _tar _spec
  tar=`basename $targetDir`
  if [[ $(find $targetDir -maxdepth 1 \! -name RPM | wc -l ) -gt 1 ]] then
    execCmd "tar --exclude '.svn' --exclude 'CVS' --exclude '.git' -C $workDir -cvzf $rpmSrcDir/$_tar.tar.gz $_tar" 
  fi

  [[ -d  $workDir$_tar/RPM/SOURCES ]] && execCmd "find $workDir$_tar/RPM/SOURCES/ -maxdepth 1 -type f -exec cp '{}' $rpmSrcDir ';'"
  #backup spec file
  _spec=`basename $specFile`
  [[ -f "$rpmSpecDir/$_spec" ]] && execCmd "cp $rpmSpecDir/$_spec $rpmSpecDir/$_spec.bak"
  execCmd "cp $specFile $rpmSpecDir"
}

function rpmBuild {
  printDBG "invoking ${0}[$stgNum], using ${rpmBuildMethod:-rpmbuild}"

	local _pkg _pkgFile _srcPkgFile
  typeset -A _uniqPackages

  if [[ "$rpmBuildMethod" == 'mock' ]] then
    execCmd "mock $mockDebugOpt --no-clean $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros --buildsrpm --spec $specFile --sources $rpmSrcDir"
   _srcPkgFile=`execCmd "ls $mockDir/results/*.src.rpm" '' '1'`
    for (( _buildCycle=1; _buildCycle <= $((${#rpmMacros}?${#rpmMacros}:1)); _buildCycle++ ))
    do
      printDBG "build cycle: $_buildCycle, rpm macro(s): ${rpmMacros[$_buildCycle]:-not set}"
      [[ `echo "$mockOptions" | grep -o -- '--no-cleanup-after'` == '--no-cleanup-after' ]] &&  _mockCleanUp='--no-clean'
      _t=`execCmd "print -- ${rpmMacros[$_buildCycle]} | grep -o '__target \+[ix_3468]\+'" 'yes' '1'`
      _arch=${_t##__target }
  
      if [[ -n "$_arch" && "$_arch" != 'noarch' && "$mockConfigFile" != "${${modBuild%.*}%.*}"-$_arch ]] then
        _mockCleanUp=''
        printDBG "Arch changed to $_arch" 2
        setMockConfigFile $_arch
      fi

      execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --installdeps --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --rebuild $_srcPkgFile"
      if [[ -n "$optSaveBuildEnv" ]]; then
        [[ -z "$saveBuildEnvPath" ]] && printDBG "-S is set but saveBuildEnvPath variable is not configured, backup will not be performed" 
        [[ -n "$saveBuildEnvPath" && ! -d "$saveBuildEnvPath" ]] && printDBG "-S is set but $saveBuildEnvPath directory does not exists,backup will not be performed" 
      fi
      if [[ -n "$optSaveBuildEnv" && -n "$saveBuildEnvPath" && -d "$saveBuildEnvPath" ]] then
        saveBuidEnvArcPath=`execCmd "rpm -q $rpmOptMacros ${rpmMacros[$_buildCycle]} --qf '%{NAME}-%{VERSION}-%{RELEASE}\n' --specfile $specFile | head -1" '' '1'`
        printDBG "saving build environmet to $saveBuildEnvPath$saveBuidEnvArcPath"
        execCmd "rm -rf $saveBuildEnvPath$saveBuidEnvArcPath"
        execCmd "mkdir -m775 -p $saveBuildEnvPath$saveBuidEnvArcPath"

        execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot \"find builddir -type d -exec chgrp mockbuild '{}' ';'\""
        execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot \"find builddir -type d -exec chmod g+rwx '{}' ';'\""
        execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot \"find builddir -type f -exec chmod g+rw '{}' ';'\""
        execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot \"find /builddir/build/RPMS -type f -delete\""
        execCmd "mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot \"yum clean all\""

        execCmd "sudo tar  -Pcvzf $saveBuildEnvPath$saveBuidEnvArcPath/$saveBuidEnvArcPath.tar.gz $mockRoot"

        cat <<-EOF > $saveBuildEnvPath$saveBuidEnvArcPath/extract

        if [[ -d $mockRoot ]]; then
          echo "$mockRoot already exists please run *clean* script before extracting, ensure nobody is using the directory" >&2
          exit 1
        fi
        echo "extracting to $mockRoot ..."
        sudo tar xzf $saveBuildEnvPath$saveBuidEnvArcPath/$saveBuidEnvArcPath.tar.gz -C / 2>&1 | grep -v 'Removing leading'
        ln -sfT `find ${mockRoot}builddir/build/BUILD/ -maxdepth 1 | tail  -1` $saveBuildEnvPath$saveBuidEnvArcPath/source
        echo "the sources directory tree is located at /builddir/build/BUILD in chroot"
EOF

        execCmd "chmod +x $saveBuildEnvPath$saveBuidEnvArcPath/extract"

        cat <<-EOF > $saveBuildEnvPath$saveBuidEnvArcPath/shell

        if [[ ! -d $mockRoot ]]; then
          echo "$mockRoot does not exists, probably you have to run 'extract' script"
          exit 1
        fi
        mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --shell
EOF

        execCmd "chmod +x $saveBuildEnvPath$saveBuidEnvArcPath/shell"

        cat <<-EOF >  $saveBuildEnvPath$saveBuidEnvArcPath/build

        if [[ ! -d $mockRoot ]]; then
          echo "$mockRoot does not exists, probably you have to run 'extract' script" >&2
          exit 1
        fi

        if [[ -z "\$1"  ]]; then
          echo "Release parameter is required" >&2
          exit 1
        fi

        perl -pi -e "s/(^Release:)(.*?)(%.+)?$/\1 \$1\3/" ${mockRoot}builddir/build/SPECS/`basename $specFile`

        mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile --resultdir=$saveBuildEnvPath$saveBuidEnvArcPath/logs -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot "chown mockbuild:mockbuild /builddir/build/SPECS/`basename $specFile`"

        
        rm -rf $saveBuildEnvPath$saveBuidEnvArcPath/logs
        mkdir -m775 $saveBuildEnvPath$saveBuidEnvArcPath/logs
        _packager=\`rpm -E %packager\`
        [[ \$_packager == '%packager' ]] && _packager=\$USER

        mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile --resultdir=$saveBuildEnvPath$saveBuidEnvArcPath/logs -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --chroot "rpmbuild -ba -D 'prep %{nil}' -D 'buildsubdir %{nil}'  -D '_builddir /builddir/build/BUILD/$pkgName-$modBuild' -D 'packager \$_packager' --nodeps /builddir/build/SPECS/`basename $specFile`"

        echo "build performed using SPEC FILE at /builddir/build/SPECS/`basename $specFile`"
EOF

        execCmd "chmod +x $saveBuildEnvPath$saveBuidEnvArcPath/build"

        cat <<-EOF > $saveBuildEnvPath$saveBuidEnvArcPath/copy
       
        if [[ ! -d  $mockRoot/builddir/build/ ]]; then
          echo "$mockRoot/builddir/build/ does not exists, probably you have to run 'extract' script, perform build ..."
          exit 1
        fi 
        dstHostDir="$rpmRepoHost:/u01/ks/repos/Incoming/`echo $modBuild | cut -d. -f 1,2`"
        echo "copy will be performed to \$dstHostDir"
        mkdir -p -m775 $saveBuildEnvPath$saveBuidEnvArcPath/RPMS
        for p in \`find $mockRoot/builddir/build/ -name '*[h64].rpm'\`
        do
          cp \$p $saveBuildEnvPath$saveBuidEnvArcPath/RPMS
          scp \$p \$dstHostDir
        done 
EOF

        execCmd "chmod +x $saveBuildEnvPath$saveBuidEnvArcPath/copy"

        cat <<-EOF > $saveBuildEnvPath$saveBuidEnvArcPath/clean

        mock $mockDebugOpt $_mockCleanUp $mockOptions --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros ${rpmMacros[$_buildCycle]} --clean
        rm -f $saveBuildEnvPath$saveBuidEnvArcPath/source
EOF
        execCmd "chmod +x $saveBuildEnvPath$saveBuidEnvArcPath/clean"

      fi
    done
    packageList[1]=$_srcPkgFile
    for _pkgFile in `execCmd "ls $mockDir/results/*[h64].rpm" '' '1'`
    do
      if [[ -f $_pkgFile && -z ${_uniqPackages[$_pkgFile]} ]] then
        packageList[$(($#packageList+1))]="$_pkgFile"
        _uniqPackages[$_pkgFile]="$_pkgFile"
      fi
    done
  else
    for (( _buildCycle=1; _buildCycle <= $((${#rpmMacros}?${#rpmMacros}:1)); _buildCycle++ ))
    do
      printDBG "build cycle: $_buildCycle, rpm macro(s): ${rpmMacros[$_buildCycle]:-not set}"
      execCmd "rpmbuild -ba $rpmOptMacros  ${rpmMacros[$_buildCycle]} $rpmbuildOpt $specFile 2>&1"
      for _pkg in `execCmd "rpm -q $rpmOptMacros ${rpmMacros[$_buildCycle]} --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}.rpm\n' --specfile $specFile" '' '1'`
      do
        _pkgFile=`rpm -E '%_rpmdir/'``echo $_pkg | awk -F. '{print $(NF-1)}'`"/$_pkg"
        if [[ -f $_pkgFile && -z ${_uniqPackages[$_pkgFile]} ]] then
          packageList[$(($#packageList+1))]="$_pkgFile"
          _uniqPackages[$_pkgFile]="$_pkgFile"
        fi
      done
    done

    _srcPkgFile=`execCmd "rpm -qp --qf '%{SOURCERPM}\n' ${packageList[2]}" '' '1'`
    [[ -z "$_srcPkgFile" ]] && printERR "no packages files found. please report to abt developers"
    packageList[1]="`rpm -E '%_srcrpmdir'`/$_srcPkgFile"
  fi
}

function rpmRepoCopy {
	printDBG "invoking ${0}[$stgNum]"
	
	local _i	
  local _err
  local _repo_from_release 

  [[ "$repoUseRelease" == 'True' ]] && _repo_from_release=`execCmd "rpm -qp --qf '%{RELEASE}' ${packageList[1]} | grep -o el." 'yes' '1'` ||:
  if [[ -n "$_repo_from_release" ]]; then
    srpmRepoHome=`dirname $srpmRepoHome`/$_repo_from_release
    rpmRepoHome=`dirname $rpmRepoHome`/$_repo_from_release
  fi

	_err=`execCmd "test -d $srpmRepoHome/SRPMS.$repo && echo 0 || echo 1" 'yes' '1' "$rpmRepoHost"`
	[[ $_err != '0' ]] && execCmd "install -m 775 -g rpm -d $srpmRepoHome/SRPMS.$repo" '' '' "$rpmRepoHost"
  copyCmd "${packageList[1]}" "$srpmRepoHome/SRPMS.$repo" "$rpmRepoHost"

	_err=`execCmd "test -d $rpmRepoHome/RPMS.$repo && echo 0 || echo 1" 'yes' '1' "$rpmRepoHost"`
	[[ $_err != '0' ]] && execCmd "install -m 775 -g rpm -d $rpmRepoHome/RPMS.$repo" '' '' "$rpmRepoHost"
	for (( _i=2; _i<=${#packageList[@]}; _i+=1 ))
	do
    copyCmd "${packageList[$_i]}" "$rpmRepoHome/RPMS.$repo" "$rpmRepoHost"
	done
}

function debRepoCopy {
  printDBG "invoking ${0}[$stgNum]"

  execCmd "mkdir -p $debRepoHome/$repo" '' '' "$rpmRepoHost" 
  copyCmd "$targetDir/*.deb" "$debRepoHome/$repo" "$debRepoHost"
}

function rpmUpdateRepo {
	printDBG "invoking ${0}[$stgNum]"
# yum
   execCmd "createrepo --update $rpmRepoHome/RPMS.$repo" '' '' "$rpmRepoHost"
   execCmd "createrepo --update $srpmRepoHome/SRPMS.$repo" '' '' "$rpmRepoHost"

# apt 
#  execCmd "genbasedir --partial $rpmRepoHome $repo" '' '' "$rpmRepoHost"
}

function debUpdateRepo {
  printDBG "invoking ${0}[$stgNum]"
  execCmd "cd $debRepoHome/$repo; dpkg-scanpackages . | gzip -9c > Packages.gz" "$debRepoHost"
}

function rpmCleanUp {
  printDBG "invoking ${0}" 2
  local _i

  for _i in "${packageList[@]}"
  do
    execCmd "rm $_i"
  done 
  [[ -n "$vcsModule" ]] && execCmd "rpmbuild --nodeps --clean --rmsource $rpmOptMacros ${rpmMacros[1]} $specFile 2>&1" || printDBG "skipping rpm sources clean" 2
  if [[ "$rpmBuildMethod" == 'mock' ]] then
    execCmd "mock $mockDebugOpt --configdir=$mockConfigDir -r $mockConfigFile -D '%abt_pkgName $pkgName' $rpmOptMacros --scrub=chroot"
    execCmd "rm -rf $mockDir"
  fi
}

function cleanUp {
  printDBG "invoking ${0}[$stgNum]"

  [[ $pkgType == "rpm" ]] && rpmCleanUp 
  execCmd "rm -rf $targetDir"
  execCmd "rm -f $logFile"
  if [[ -d `dirs -p | sed -n '2p'` ]] then
    popd
  else
    cd 
  fi
}

function rpmRepoCheck {
	printDBG "invoking ${0}[$stgNum]"

	local _warn _r _pkg _srcPkgReal _srcPkgDest
	_srcPkgReal=`rpm -q --qf '%{NAME}-%{VERSION}-%{RELEASE}.src.rpm\n' --specfile $specFile | head -n 1`
  _srcPkgDest=`awk 'BEGIN{"rpm -E %_os_release"|getline rel;print gensub(rel "\\\" ".","","G",ARGV[1])}' $_srcPkgReal`
	_r=`execCmd "[ -f $srcRpmRepo/$srcPkgDest ] && echo 1" "" "" "$rpmRepoHost"`
	if [[ -n "$_r" ]] then
		_warn=1
		printDBG "WARNING: source package $srcPkgDest already exist in $rpmRepoHost:$srcRpmRepo"
  fi

  for _pkg in `rpm -q --qf '%{NAME}-%{VERSION}-%{RELEASE}.%{ARCH}.rpm\n' --specfile $specFile`
  do
    _r=`execCmd "[ -f $binRpmRepo/$_pkg ] && echo 1" "" "" $rpmRepoHost`
		if [ -n "$_r" ]; then
			_warn=1
      printDBG "WARNING: package $_pkg already exist in $rpmRepoHost:$bitRpmRepo."
		fi
  done

  if [[ -n "$_warn" ]] then
    echo "Press RETURN to continue or Ctrl+C to Cancel"
    read
  fi
}

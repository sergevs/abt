#!/bin/zsh 

set -o kshglob
set -o shwordsplit
set -o errexit
set -o dotglob

modBuild=''
modVer=''
specFile=''


[[ -f /etc/abt/abtrc ]] && . /etc/abt/abtrc
[[ -f ~/.abtrc ]] && . ~/.abtrc

abtPath=${0%/*}

if [[ -f "$functionsFile" ]] then
	. "$functionsFile"
else
	. "$abtPath/abt.functions"
fi

if [[ $? -ne 0 ]] then
	print "ERR - error while sourcing functions" >&2
	exit 1
fi

function printUsage {
  cat <<EOF
Usage: abt -v <version> [OPTIONS] <vcs module path>

Options:
           [-a <release> ]
           [-b <trunk|branch|tag> ] 
           [-c <abt filename> ] 
           [-d <debug level> ]
           [-e <changelog entry> ]
           [-h ]
           [-l <enable logging> ]
           [-n <vcs revision> ]
           [-o <build from spec file> ]
           [-m 0|1|<mock config> ]  0 - don't use mock, 1 - use mock, <mock config> - config file without arch and cfg extention
           [-p <rpmbuild  options> ]
           [-P rpm|deb ] package type to build
           [-r <repository> ]
           [-s <skip stages> ] 
           [-t <config type> ]
           [-u <vcs base URL> ]
           [-v <version>]
           [-A "module alias"]
           [-D "rpm macros"]
           [-C <full path to additional configuration file> (overrides /etc/abt/abtrc and ~/.abtrc)
           [-S <save build environment>]
           [-V [svn|git] version control systemt]

Default stages are:
EOF
  for ((_i=1;_i<=$maxStages;_i+=1))
  do
    [[ -n "${stage[$_i]}" && "${stage[$_i]}" != 'none' ]] && printf "Stage %3d => %s\n" $_i ${stage[$_i]}
  done
  exit 1
}

while getopts "C:a:b:c:d:e:ln:o:p:m:r:s:t:u:v:A:D:P:SV:h" opt; do
	case $opt in 
		a) rpmRel="$OPTARG" ;;
		b) vcsRel="$OPTARG" ;;
		c) abtFile="$OPTARG" ;;
		d) isDebug="$OPTARG" ;;
		e) changeLog[1]="- $OPTARG" ;;
		h) printUsage;;
		l) isLog=1;;
		n) svnProjectRev="$OPTARG";;
		o) specFile="$OPTARG" ;;
		p) rpmbuildOpt="$OPTARG" ;;
		r) repo="$OPTARG";;
		s) skipStages="$OPTARG" ;;
		t) configType="$OPTARG";;
		v) modBuild="$OPTARG" ;;
		u) vcsBase="$OPTARG" ;;
		A) moduleSetAlias $OPTARG ;;
		D) rpmSetOptMacros $OPTARG ;;
		C) addConfigFile="$OPTARG"
        if [[ -n "$addConfigFile" ]]; then
          if [[ -r "$addConfigFile" ]]; then
            . $addConfigFile 
            if [[ -f "$functionsFile" ]]; then
            . "$functionsFile"
            fi
          else 
            printERR "Additional config file <$addConfigFile> specified but not readable"
          fi
        fi
       ;;
		P) pkgType="$OPTARG" ;;
		S) optSaveBuildEnv=1 ;;
		V) vcsSystem="$OPTARG"
       [[ "$vcsSystem" != 'git' ]] && [[ "$vcsSystem" != 'svn' ]] && printERR "-V option only accepts 'svn' or 'git'" ||:
       ;;
    m) case $OPTARG in
        0) rpmBuildMethod='rpmbuild';;
        1) rpmBuildMethod='mock';;
        *) optMockConfigFile="$OPTARG"
           rpmBuildMethod='mock'
        ;;
       esac
        ;;
        *) printUsage;;
	esac
done

shift $(($OPTIND - 1))

vcsModule=$1

# vcs Module verification
[[ -z "$vcsModule" ]] && [[ -z "$specFile" ]] && printERR "vcs module or specfile[-o] option is not specified, see abt -h"
[[ -n "$vcsModule" ]] && [[ -n "$specFile" ]] && printERR "vcs module conflicts with specfile[-o] option, see abt -h"
[[ -n "$specFile" ]] && [[ -n "$modBuild" ]] && printERR "verion[-v] option conflicts with specfile[-o], see abt -h"

# version verification
[[ -z "$specFile" ]] && [[ -z "$modBuild" ]] && printERR "-v <product version> is mandatory"
#[[ -n "${modBuild##+([0-9]).+([0-9]).+([0-9]).+([0-9])}" ]] && printERR "Wrong version $modBuild, have to be in x.x.x.x form"
modVer=${modBuild%[.-]+([0-9])}

# debug level verification
[[ -n "${isDebug##+([0-9])}" ]] && printERR "debug level have to be a number"

printDBG "started $0 `date +'%H:%M:%S %d.%m.%Y'`" 1
startTime=`date +%s`

# parse skipStages option and undefine stages
if [[ -n "$skipStages" ]] then
	for _skip in ${(z)skipStages}
	do
		if [[ $_skip = *-* ]] then
			_skip_start=${_skip%%-+([0-9])}
			_skip_end=${_skip##+([0-9])-}

			for (( _si=$_skip_start; _si<=$_skip_end; _si+=1 )) 
			do
				stage[$_si]='none'
			done
		else
			stage[$_skip]='none'
		fi
	done
fi

# main loop
# using with check because get values of array will not work 
# after an element redefinition in the loop that in the turn does not allow
# add a function in the middle of steps
for ((stgNum=1;stgNum<=$maxStages;stgNum+=1))
do
	[[ -n "${stage[$stgNum]}" ]] && [[ "${stage[$stgNum]}" != 'none' ]] && ${stage[$stgNum]}
done

finishTime=`date +%s`

printDBG "finished $0 `date +'%H:%M:%S %d.%m.%Y'`, elapsed `date -d \"0 $finishTime sec - $startTime sec\" +'%H:%M:%S'`" 1
#it's required to explicity define success return value
exit 0
